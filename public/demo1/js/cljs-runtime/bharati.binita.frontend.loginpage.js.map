{"version":3,"sources":["bharati/binita/frontend/loginpage.cljs"],"mappings":"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","names":["bharati.binita.frontend.loginpage/comp-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","bharati.binita.frontend.loginpage/comp-state-no-render","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","bharati.binita.frontend.loginpage/keyboardRef1","bharati.binita.frontend.loginpage/generate-component","input","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","event","js/console.log","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/type","js/document","js/module$node_modules$react_simple_keyboard$build$index.default","button","myRef","cljs.core/reset!","bharati.binita.frontend.loginpage/run","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document.getElementById"],"sourcesContent":["(ns bharati.binita.frontend.loginpage\r\n  (:require [reagent.core :as reagent]\r\n            [react-simple-keyboard :default Keyboard]\r\n))\r\n\r\n(def comp-state (reagent/atom {:showVK \"none\" :input \"\" :submittedEmail \"\" \r\n\t\t\t\t\t\t\t   :submittedPassword \"\" :emailKlass \"input100\" :passwordKlass \"input100\"}))\r\n\r\n(def comp-state-no-render (atom {:showVK \"none\" :latestFocus \"none\"}));Using normal atom so that re-rendering of component does not happen automatically on mutating the state.\r\n\r\n(def keyboardRef1 (clojure.core/atom nil))\r\n\r\n(defn generate-component [input]\r\n[:div {:className \"wrap-login100\"}\r\n[:form {:className \"login100-form validate-form\"}\r\n     [:span {:className \"login100-form-title p-b-43\"} \"Login to continue\"]\r\n\t [:div {:className \"wrap-input100 validate-input\" :data-validate \"Valid email is required: ex@abc.xyz\"}\r\n\t       [:input {:id \"email\" :className (get @comp-state :emailKlass) :type \"text\" :name \"email\"  \r\n\t\t   :onClick (fn [event] \r\n\t\t                (js/console.log \"email input onClick\")\r\n\t\t\t\t\t\t(cond \r\n\t\t\t\t\t\t\t(= (get @comp-state-no-render :showVK) \"block\")\r\n\t\t\t\t\t\t\t\t(do \r\n\t\t\t\t\t\t\t\t\t(swap! comp-state-no-render assoc :latestFocus \"email\"))\r\n\t\t\t\t\t\t\t:else\r\n\t\t\t\t\t\t\t\t(swap! comp-state-no-render assoc :latestFocus \"none\")))\r\n\t\t\t:value (get @comp-state :submittedEmail)\r\n\t\t\t;onChange needs to be specified, else , input will become read-only, as value has been set.\r\n            :onChange (fn [event] \r\n\t\t\t\t\t\t   (js/console.log \"email input onChange\" (.-value (.-target event)))\r\n\t\t\t\t\t\t   (swap! comp-state assoc :submittedEmail (.-value (.-target event)))\r\n\t\t\t\t\t\t  )\t\t\t}]\r\n\t\t   [:span {:className \"focus-input100\"}]\r\n\t\t   [:span {:className \"label-input100\"} \"Email\"]\r\n\t ]\r\n\t [:div {:className \"wrap-input100 validate-input\" :data-validate \"Password is required\"}\r\n\t       [:input {:id \"password\" :className (get @comp-state :passwordKlass) :type \"password\" :name \"pass\" \r\n\t\t    :onClick (fn [event] \r\n\t\t\t\t\t\t(cond \r\n\t\t\t\t\t\t\t(= (get @comp-state-no-render :showVK) \"block\")\r\n\t\t\t\t\t\t\t\t(do \r\n\t\t\t\t\t\t\t\t\t(swap! comp-state-no-render assoc :latestFocus \"password\"))\r\n\t\t\t\t\t\t\t:else\r\n\t\t\t\t\t\t\t\t(swap! comp-state-no-render assoc :latestFocus \"none\")))\r\n\t\t\t:value (get @comp-state :submittedPassword)\r\n\t\t\t:onChange (fn [event] \r\n\t\t\t\t\t\t   (js/console.log \"email input onChange\" (.-value (.-target event)))\r\n\t\t\t\t\t\t   (swap! comp-state assoc :submittedPassword (.-value (.-target event)))\r\n\t\t\t\t\t\t   )}]\r\n\t\t   [:span {:className \"focus-input100\"}]\r\n\t\t   [:span {:className \"label-input100\"} \"Password\"]\r\n\t ]\r\n\t [:div {:className \"flex-sb-m w-full p-t-3 p-b-32\"}\r\n\t       [:div {:className \"contact100-form-checkbox\"}\r\n\t\t        [:input {:className \"input-checkbox100\" :id \"ckb1\" :type \"checkbox\" :name \"remember-me\"}]\r\n\t\t\t\t[:label {:className \"label-checkbox100\" :for \"ckb1\"} \"Remember me\"]\r\n\t\t   ]\r\n\t\t   [:div [:a {:href \"#\" :className \"txt1\"} \"Forgot Password?\"]]\r\n      \t  \r\n\t  ]\r\n\t  [:div {:className \"flex-sb-m w-full p-t-3 p-b-32\"}\r\n\t       [:div {:className \"contact100-form-checkbox\"}\r\n\t\t         [:input {:className \"input-checkbox100\" :id \"ckb2\" :type \"checkbox\" :name \"use-virtual-keyboard\" :onChange (fn [event] \r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t(js/console.log (str \"UseVirtualKeyboard -> onChange: entered with1 \" event))\r\n\t\t\t\t\t\t\t\t(js/console.log (str \"UseVirtualKeyboard -> onChange: entered with2 \" (type event)))\r\n\t\t\t\t\t\t\t\t(js/console.log (str \"UseVirtualKeyboard -> onChange: entered with3 \" (.-checked (.-target event))))\r\n\t\t\t\t\t\t\t\t(cond \r\n\t\t\t\t\t\t\t\t\t(.-checked (.-target event)) ;when true\r\n\t\t\t\t\t\t\t\t\t\t(do \r\n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"UseVirtualKeyboard -> onChange: setting VK to visible \"))\r\n\t\t\t\t\t\t\t\t\t\t\t(swap! comp-state assoc :showVK \"block\")\r\n\t\t\t\t\t\t\t\t\t\t\t(swap! comp-state-no-render assoc :showVK \"block\")\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"bini1111\") (.-id (.-activeElement js/document)));testing\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t:else\r\n\t\t\t\t\t\t\t\t\t\t(do \r\n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"UseVirtualKeyboard -> onChange: setting VK to hidden \"))\r\n\t\t\t\t\t\t\t\t\t\t\t(swap! comp-state assoc :showVK \"none\")\r\n\t\t\t\t\t\t\t\t\t\t\t(swap! comp-state-no-render assoc :showVK \"none\")\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t  )}]\r\n\t\t\t\t [:label {:className \"label-checkbox100\" :for \"ckb2\"} \"Use virtual keyboard\"]\r\n\t\t   ]\r\n\t  ]\r\n\t  [:div {:className \"container-login100-form-btn\"}\r\n\t        [:button {:className \"login100-form-btn\"} \"Login\"]\r\n\t  ]\r\n\t\r\n\t \r\n\t  \r\n]\r\n[:div {:id \"loginBackgroundDiv\" :className \"login100-more\" :style {:background-image \"url('images/bg-01.jpg')\" :position \"relative\"}};this div is set to z-index 1\r\n\t[:div {:id \"vkeyboardDiv\" :style {:position \"absolute\" :z-index 2 :display (get @comp-state :showVK)\r\n\t:width \"80%\"}}\r\n\t\t[:input {:value (get @comp-state :input)\r\n\t\t\t\t\t:placeholder \"Tap on the virtual keyboard to start\"\r\n\t\t\t\t\t:onChange (fn [event]\t\t\t\t\t\r\n\t\t\t\t\t\t(js/console.log (str \"onChangeInput: entered with\" event.target.value))\r\n\t\t\t\t\t\t(swap! comp-state assoc :input event.target.value)\r\n\t\t\t\t\t\t(js/console.log (str \"onChangeInput: keyboardRef = \" @keyboardRef1))\r\n\t\t\t\t\t\t(.setInput @keyboardRef1 event.target.value))}]\r\n\t\t [:> Keyboard {:layoutName \"default\"\r\n\t\t\t\t\t\t  :onChange (fn [input] \t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onChange: entered with \" input))\r\n\t\t\t\t\t\t\t\t(swap! comp-state assoc :input input)\r\n\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onChange: after mutating ratom = \"@comp-state)))\r\n                          :onKeyPress (fn [button]\r\n                                        (js/console.log (str \"onKeyPress: entered with \" button))\r\n\t\t\t\t\t\t\t\t\t\t(cond \r\n\t\t\t\t\t\t\t\t\t\t\t(= button \"{enter}\")\r\n\t\t\t\t\t\t\t\t\t\t\t(do \r\n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onKeyPress: submitted input \" (get @comp-state :input)))\r\n\t\t\t\t\t\t\t\t\t\t\t;get last focussed element and paste the submitted input in that field\r\n\t\t\t\t\t\t\t\t\t\t\t(cond \r\n\t\t\t\t\t\t\t\t\t\t\t\t(= (get @comp-state-no-render :latestFocus) \"email\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(do (swap! comp-state assoc :submittedEmail (get @comp-state :input))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(swap! comp-state assoc :emailKlass \"input-100 has-val\"))\r\n\t\t\t\t\t\t\t\t\t\t\t\t(= (get @comp-state-no-render :latestFocus) \"password\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(do (swap! comp-state assoc :submittedPassword (get @comp-state :input))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(swap! comp-state assoc :passwordKlass \"input-100 has-val\"))\r\n\t\t\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t\t\t\t:else\r\n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onKeyPress: pressed input \" button))\r\n\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t\t\t)\r\n\r\n                            )\r\n\t\t\t\t\t\t\t:keyboardRef (fn [myRef] \r\n\t\t\t\t\t\t\t\t(js/console.log (str \"Before setting keyboard ref, keyboardRef = \"@keyboardRef1))\r\n\t\t\t\t\t\t\t\t(reset! keyboardRef1 myRef)\r\n\t\t\t\t\t\t\t\t(js/console.log (str \"After setting keyboard ref , keyboardRef = \"@keyboardRef1)))\r\n\t\t\t\t\t\t\t\r\n\t\t\t}]\r\n\t]]\r\n]\r\n\r\n)\r\n\r\n\r\n(defn run []\r\n  (reagent/render [generate-component]\r\n            (js/document.getElementById \"root\")))\r\n\r\n\r\n\r\n\r\n\r\n"]}