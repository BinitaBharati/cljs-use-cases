{"version":3,"sources":["bharati/binita/frontend/demo2.cljs"],"mappings":";;;;AAMA,AAAA,AAAMA,AAAgBC;AAAtB,AAEC,AAAMC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AACfC,AAAa,AAAA,AAACC;AADjB,AAEC,AAAA,AAAA,AAAA,AAAA,AAACC,AAEoB,AAAKC;AAAL,AACrB,AAACC,AAAe;AAHhB,AAKgB;AAAA,AAChB,AAACA,AAAe,AAAA,AAAA,AAAAC,AAAqCP;;AACrD,AAACM,AAAe,AAAA,AAA4C,AAAA,AAAAC,AAAA,AAACC,AAAKR;;AAFlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIC,AAAA,AAAAO,AAAA,AAACC,AAAKR,AAEV,AAAKS;AAAL,AAET,AAACH,AAAe,AAAA,AAAmC,AAAA,AAAAG;;AACnD,AAAA,AAACC,AAAMV,AAAWW,AAAa,AAAA,AAAAF;;AAC/B,AAACH,AAAe,AAAA,AAAA,AAAAC,AAAsCL;;AACtD,AAAA,AAAAK,AAAYL,AAAa,AAAA,AAAAO;AAXb,AAAA,AAAA,AAAA,AAAA,AAAA,AAeVG,AACU,AAAKb;AAAL,AAEV,AAACO,AAAe,AAAA,AAA2CP;;AAC3D,AAAA,AAACW,AAAMV,AAAWW,AAAaZ;;AAC/B,AAACO,AAAe,AAAA,AAAA,AAAAC,AAAqDP;AApB3D,AAsBoB,AAAKa;AAAL,AACE,AAACP,AAAe,AAAA,AAAiCO;;AAC/E,AACC,AAAA,AAACC,AAAED;AACH,AACA,AAACP,AAAe,AAAA,AAAgD,AAAA,AAAAC,AAAA,AAACC,AAAKR;;AAHvE,AAKC,AAACM,AAAe,AAAA,AAA8CO;;;AA7BvD,AAkCE,AAAKE;AAAL,AACZ,AAACT,AAAe,AAAA,AAAA,AAAAC,AAAmDL;;AACnE,AAACc,AAAOd,AAAaa;;AACrB,AAACT,AAAe,AAAA,AAAA,AAAAC,AAAmDL;;;;AAS3E,AAAA,AAAMe;AAAN,AACE,AAAA,AAACC,AAAgBpB,AACP,AAAA,AAACqB","names":["bharati.binita.frontend.demo2/create-wrapper","input","comp-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","keyboardRef1","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.core/create-class","this","js/console.log","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","event","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/module$node_modules$react_simple_keyboard$build$index.default","button","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","myRef","cljs.core/reset!","bharati.binita.frontend.demo2/run","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document.getElementById"],"sourcesContent":["(ns bharati.binita.frontend.demo2\n  (:require [reagent.core :as reagent]\n            [react-simple-keyboard :default Keyboard]\n))\n\n\n(defn create-wrapper [input]\n\n\t(let [comp-state (reagent/atom {:layoutName \"default\" :input \"\"})\n\t\t  keyboardRef1 (clojure.core/atom nil)]\n\t (reagent/create-class \n\t {:display-name \"bini-wrapper-component\"\n\t :component-did-mount (fn [this] \n\t (js/console.log (str \"component-did-mount: entered. Need to set keyboard ref here!\")\n\t ))\n\t :reagent-render (fn [] \n\t\t(js/console.log (str \"reagent-render: entered with \"@comp-state))\n\t\t(js/console.log (str \"reagent-render: entered with input = \"(get @comp-state :input)))\n\t\t[:div\n\t\t\t[:input {:value (get @comp-state :input)\n\t\t\t\t\t:placeholder \"Tap on the virtual keyboard to start\"\n\t\t\t\t\t:onChange (fn [event]\n\t\t\t\t\t\n\t\t\t\t\t\t(js/console.log (str \"onChangeInput: entered with\" event.target.value))\n\t\t\t\t\t\t(swap! comp-state assoc :input event.target.value)\n\t\t\t\t\t\t(js/console.log (str \"onChangeInput: keyboardRef = \" @keyboardRef1))\n\t\t\t\t\t\t(.setInput @keyboardRef1 event.target.value)\n\n\t\t\t\t\t)\n\t\t\t\t\t}]\n\t\t\t [:> Keyboard {:layoutName \"default\"\n\t\t\t\t\t\t  :onChange (fn [input] \n\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onChange: entered with \" input))\n\t\t\t\t\t\t\t\t(swap! comp-state assoc :input input)\n\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onChange: after mutating ratom = \"@comp-state))\n\t\t\t\t\t\t  )\n                          :onKeyPress (fn [button]\n                                        (js/console.log (str \"onKeyPress: entered with \" button))\n\t\t\t\t\t\t\t\t\t\t(cond \n\t\t\t\t\t\t\t\t\t\t\t(= button \"{enter}\")\n\t\t\t\t\t\t\t\t\t\t\t(do \n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onKeyPress: submitted input \" (get @comp-state :input))))\n\t\t\t\t\t\t\t\t\t\t\t:else\n\t\t\t\t\t\t\t\t\t\t\t(js/console.log (str \"Keyboard -> onKeyPress: pressed input \" button))\n\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t)\n\n                            )\n\t\t\t\t\t\t\t:keyboardRef (fn [myRef] \n\t\t\t\t\t\t\t\t(js/console.log (str \"Before setting keyboard ref, keyboardRef = \"@keyboardRef1))\n\t\t\t\t\t\t\t\t(reset! keyboardRef1 myRef)\n\t\t\t\t\t\t\t\t(js/console.log (str \"After setting keyboard ref , keyboardRef = \"@keyboardRef1)))\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}]\n          ]\n\t\t)\n\t })\n))\n\n\n(defn run []\n  (reagent/render [create-wrapper]\n            (js/document.getElementById \"root\")))\n\n\n\n\n\n\n"]}